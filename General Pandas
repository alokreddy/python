#Avoid IPython Notebook output cell truncating contents of my list

from pandas import DataFrame
from IPython.display import HTML
HTML(DataFrame(myList).to_html())

####################################################################
#using the python global() option to manipulate dataframes in Ipython

#method to replace the spaces in all the data frames
def replaceSpace(df_list):
        df_list.columns = [c.replace(" ","_") for c in df_list.columns]

#getting the list of the dataframes currently active in the Ipython notebook
list_df = %who_ls DataFrame

#using globals() to apply the above method to all the dataframes
for i in list_df:
        replaceSpace(globals()[i])

###################################################################
#using izip to create a dict from dataframe columns
region_dict = dict(izip(regions_table.EE_Country, regions_table.EE_Region))

####################################################################
#using dict to create a new column and add values into the column based on the dict
for k, v in region_dict.iteritems():
    dfa.loc[dfa["EE_Country"] == k, "Region"] = v

####################################################################
#filling or manipulating or creating new columns based on the values from other columns
df.loc[(df.FLSA_Code_Override.notnull()), 'FLSA_Status_Description'] = df["FLSA_Code_Override"]
df.loc[(df.Bonus_Percent_Override.notnull()), 'Bonus_Percent'] = df["Bonus_Percent_Override"]

######################################################################
#filtering columns based on the values in multiple columns
er = er[er.Assignment_Category.isin(['Regular', 'Regular Limited'])& er.Payroll_Country.isin(['United States'])]

#######################################################################
#find the min or the max value in a dataframe column and filter the entire row
only_us_mip.loc[only_us_mip.Annual_Salary_If_Full_time.idxmin()]

#########################################################################
#create salary ranges (or ranges from anyother numerical column) from a dataframe using groupby
ranges = [0,40000,60000,80000,100000,125000,150000,175000,200000,1000000]
salary_ranges = pd.DataFrame(tem.groupby(pd.cut(tem.Annual_Salary_If_Full_time, ranges))["Bonus_Percent"].mean())

########################################################################
#get a filename in the current directory with partial name
filename = glob.glob( "".join([ os.getcwd(), "\\Oracle*.xlsx"]))
os.path.basename(filename[0])


########################################################################
#finding the first row with non nan values
df.loc[df.notnull().all(axis=1).argmax():] #find the first occurrence without duplicate indexes (dates)
df.loc[df.notnull().all(axis=1).cummax():] #this will takecare of duplicate index values

########################################################################
#replace all the spaces, new line characters or anyother unnecessary characters from the column headers using this method
#by adding the characters to be removed to the list
def headerfiller(df):
    for i in [" ","\n"]:
        df.columns = [c.replace(i,"_") for c in df.columns ]

#####Better method for the above procedure
#using string 

#Sample Usage of translate, very pythonic method

tbl = str.maketrans(' \n', '__')
'a b c\n'.translate(tbl)

try:
    tbl = str.maketrans(' \n', '__')  # Python 3.x
except AttributeError:
    import string
    tbl = string.maketrans(' \n', '__')  # Python 2.x

def headerfiller(df):
    df.columns = [c.translate(tbl) for c in df.columns]

#######Same method using regex
#using regex its is useful when a pattern needs to be spotted

import re

def headerfiller(df):
    df.columns = [re.sub(r' |\n', '_', c) for c in df.columns]

#####same using str.replace method
#easiest method gets the job done not as efficient as the previous methods
df.columns.str.replace(' |\n', '_')

#################################################################################
##hack for setting the default encoding in Python 2.x to 'UTF-8'
sys.getdefaultencoding()
reload(sys)
sys.setdefaultencoding('utf-8')
